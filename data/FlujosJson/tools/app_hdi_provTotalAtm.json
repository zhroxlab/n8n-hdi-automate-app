{
  "name": "app_hdi_provTotalAtm",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9df1528-5b36-463a-b6fa-670c95526403",
              "name": "marcaAtm",
              "value": "ncr",
              "type": "string"
            },
            {
              "id": "e2df52f6-7346-4592-b2ce-e5637da89be3",
              "name": "idAtm",
              "value": 9,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        600,
        -160
      ],
      "id": "e2a252ec-e52d-4d83-a612-fed0db02b866",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "\n{\n  \"marcaAtm\": \"ncr\",\n  \"idAtm\": 8141\n}\n"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        300,
        40
      ],
      "id": "e535ebd2-dac8-441b-95c1-c82671e4eae6",
      "name": "When Executed by Another Workflow",
      "notesInFlow": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "TRrefeWK7fSSyhpw",
          "mode": "list",
          "cachedResultName": "app_hdi_provTotalAtm"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "marcaAtm": "={{ $json.marcaAtm }}",
            "idAtm": "={{ $json.idAtm }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "marcaAtm",
              "displayName": "marcaAtm",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "idAtm",
              "displayName": "idAtm",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1040,
        -160
      ],
      "id": "a434e714-525d-4e46-a1a8-464b6ee61b54",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Eres un agente especializado en analizar tiras de cajero. \n\nTu tarea es procesar una tira y extraer únicamente los números de billetes dispenados (\"DISPENSED\") correspondientes a la primera transmisión, se idendentifica encontrando \"COUNTS\".  Segudido a esta sección contiene la información de \"CASH DISPENSED\" organizada por gavetas: TYPE1, TYPE2, TYPE3 y TYPE4.\n\n## Formato:\n```\nCASH COUNTS CLEARED (CASHDISPENSER)     \nCASH DISPENSED\n```\ncon esa estructura los type se identificarian a continuacion. por ejemplo:\n```\nTYPE 1 = 03576 TYPE 2 = 00000           \nTYPE 3 = 00813 TYPE 4 = 00594 \n```\n\n**IMPORTANTE**: Devuelve únicamente el resultado en formato JSON, sin ningún comentario, explicación o texto adicional. La estructura del JSON debe ser exactamente:\n\n{ \"TYPE1\": \"<valor>\", \"TYPE2\": \"<valor>\", \"TYPE3\": \"<valor>\", \"TYPE4\": \"<valor>\" }\n\nPor ejemplo, si la transmisión muestra:\n\nTYPE1 = 00010\nTYPE2 = 00000\nTYPE3 = 00020\nTYPE4 = 00034\n\nLa salida debe ser: { \"TYPE1\": 00010, \"TYPE2\": 00000, \"TYPE3\": 00020, \"TYPE4\": 00034 }\n\n- Asegura que esa informacion de dispesado corresponde a la primera transmision.\n- Si no encuentras valor responde con los valores en 0.\n- **Asegurate que los valores que des son correctos**\n\n## Regla:\n- Si la estructura o formato no es identificada en la tira, retornar :\n{\n\"TYPE1\": 0,\n\"TYPE2\": 0,\n\"TYPE3\": 0,\n\"TYPE4\": 0\n}\n\n## Ahora, procesa la siguiente tira: \n\n{{ $json.tira }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        640,
        220
      ],
      "id": "4894e032-f3a5-4c65-a22a-29bcfdb8e611",
      "name": "AgentTira",
      "alwaysOutputData": false,
      "executeOnce": false,
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        680,
        380
      ],
      "id": "8bf3c14b-35ce-4e8c-bb3e-ca7a728eeb44",
      "name": "ModelTira",
      "credentials": {
        "openAiApi": {
          "id": "bDrVHByV826BPw8y",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Entrada: La salida del Agente de IA\nconst rawOutput = $input.first().json.output; // Accede al campo \"output\"\n\n// Extraer el contenido JSON eliminando el Markdown (```json y ```)\nconst jsonString = rawOutput\n  .replace(\"```json\", \"\") // Elimina el inicio del bloque Markdown\n  .replace(\"```\", \"\")     // Elimina el final del bloque Markdown\n  .trim();                // Elimina espacios en blanco adicionales\n\n// Parsear la cadena JSON a un objeto\nconst parsedJson = JSON.parse(jsonString);\n\n// Convertir los valores a números\nconst formattedJson = {\n  TYPE1: parseInt(parsedJson.TYPE1, 10), // \"03361\" -> 3361 (number)\n  TYPE2: parseInt(parsedJson.TYPE2, 10), // \"0000\" -> 0 (number)\n  TYPE3: parseInt(parsedJson.TYPE3, 10), // \"01924\" -> 1924 (number)\n  TYPE4: parseInt(parsedJson.TYPE4, 10)  // \"01725\" -> 1725 (number)\n};\n\n// Salida: Devolver el JSON con valores numéricos\nreturn {\n  json: formattedJson\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        220
      ],
      "id": "7b28ac0c-e56a-485b-801c-661a68acc2d6",
      "name": "stringToJson",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        300,
        -160
      ],
      "id": "6752b847-fead-44f7-9391-efe74a48155b",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "content": "## Ejemplo json _provTotalAtm\n### Entrada\n```json\n  {\n    \"marcaAtm\": \"ncr\",\n    \"idAtm\": 8141\n  }\n```\n\n### Salida:\n```json\n  {\n    \"TYPE1\": 03361,\n    \"TYPE2\": 00000,\n    \"TYPE3\": 01924,\n    \"TYPE4\": 01725\n  }\n```",
        "height": 440,
        "width": 380,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -140,
        -180
      ],
      "id": "834764a5-a334-4bb9-86a8-709d143ea3cc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n\n// Si la entrada es un objeto vacío, retornar nulls\nconst isEmpty = Object.keys(input).length === 0 && input.constructor === Object;\nif (isEmpty) {\n  return [{\n    json: {\n      TYPE1: null,\n      TYPE2: null,\n      TYPE3: null,\n      TYPE4: null\n    }\n  }];\n}\n\nconst tira = input.tira; // array de líneas de la tira\n\nconst joined = tira.join(\" \"); // Unimos todo para facilitar la búsqueda\n\n// Buscar la sección de CASH ADDED (CASHDISPENSER)\nconst patternStart = /CASH ADDED \\(CASHDISPENSER\\)/i;\n\nif (!patternStart.test(joined)) {\n  // No se encontró la sección, retornar ceros en string\n  return [{\n    json: { TYPE1: \"00000\", TYPE2: \"00000\", TYPE3: \"00000\", TYPE4: \"00000\" }\n  }];\n}\n\n// Cortamos desde esa sección\nconst cut = joined.slice(joined.search(patternStart));\n\n// Extraemos los TYPEs\nconst regexTypes = /TYPE\\s*1\\s*=\\s*(\\d{5})\\s*TYPE\\s*2\\s*=\\s*(\\d{5}).*?TYPE\\s*3\\s*=\\s*(\\d{5})\\s*TYPE\\s*4\\s*=\\s*(\\d{5})/i;\nconst match = cut.match(regexTypes);\n\nif (match) {\n  return [{\n    json: {\n      TYPE1: Number(match[1]),\n      TYPE2: Number(match[2]),\n      TYPE3: Number(match[3]),\n      TYPE4: Number(match[4])\n    }\n  }];\n} else {\n  return [{\n    json: { TYPE1: 0, TYPE2: 0, TYPE3: 0, TYPE4: 0 }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        40
      ],
      "id": "70d3781a-bf32-4276-bc75-f379fd62d64b",
      "name": "Code"
    },
    {
      "parameters": {
        "collection": "=tira_{{ $json.marcaAtm }}",
        "options": {},
        "query": "={\"numeroCajero\": \"{{ $json.idAtm.toString() }}\"} "
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        840,
        40
      ],
      "id": "58c8b770-772b-430c-b3cb-264cb51d4b39",
      "name": "MongoDB",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "J6HuzpFN5ghJjIF7",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los elementos de entrada\nconst items = $input.all();\n\n// Procesar cada item\nconst output = items.map(item => {\n  const { marcaAtm, idAtm } = item.json;\n\n  // Convertir idAtm a string\n  let idAtmStr = idAtm.toString();\n\n  // Si tiene solo 3 dígitos, agregar un cero al inicio\n  if (idAtmStr.length === 3) {\n    idAtmStr = '0' + idAtmStr;\n  }\n\n  return {\n    json: {\n      marcaAtm,\n      idAtm: idAtmStr,\n    }\n  };\n});\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        40
      ],
      "id": "25fcb6e2-ed75-4c07-8198-e4ba78e0369e",
      "name": "Code1"
    }
  ],
  "pinData": {},
  "connections": {
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AgentTira": {
      "main": [
        [
          {
            "node": "stringToJson",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ModelTira": {
      "ai_languageModel": [
        [
          {
            "node": "AgentTira",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "016dabf6-024d-48a3-bc89-14b508b21cb4",
  "meta": {
    "instanceId": "ae116b9c25ca09b6fc49d8e730094c0929b168373f3afe3e106b7c23d9778cc3"
  },
  "id": "TRrefeWK7fSSyhpw",
  "tags": []
}