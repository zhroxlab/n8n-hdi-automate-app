{
  "name": "app_hdi_historicoDate",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -60,
        -240
      ],
      "id": "5bdab8b9-efc3-4438-87e8-5f7a23c02117",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c349faef-b476-406a-9aa7-784f84f0e875",
              "name": "idAtm",
              "value": 9,
              "type": "number"
            },
            {
              "id": "4139beb0-054e-4a28-bc62-2ce11381cafa",
              "name": "fechaAtm",
              "value": 20250217,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        180,
        -240
      ],
      "id": "bbcc8a98-f8c7-4898-bc47-d2abdf5294c1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "collection": "historico_atms",
        "options": {},
        "query": "={\"CÓDIGO\": {{ $json.idAtm }}} "
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        120,
        40
      ],
      "id": "16390e98-b0e8-448c-87de-a34adce4f187",
      "name": "MongoDB",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "J6HuzpFN5ghJjIF7",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n\nfunction obtenerFechaAnteriorConRemanentes(input) {\n  try {\n    const { idAtm, fechaAtm, listHistorico } = input;\n\n    if (!idAtm) {\n      throw new Error('Se requiere el ID del cajero (idAtm)');\n    }\n\n    if (!fechaAtm || !/^\\d{8}$/.test(fechaAtm)) {\n      throw new Error('Se requiere una fecha válida en formato YYYYMMDD');\n    }\n\n    const registros = listHistorico.map(r => r.json); // extraer json de cada registro\n    const fechaNum = parseInt(fechaAtm, 10);\n\n    if (!registros || registros.length === 0) {\n      return \"sin cierre de ciclo\";\n    }\n\n    // Ordenar los registros por fecha en orden descendente\n    registros.sort((a, b) => b.FECHA - a.FECHA);\n\n    // Buscar el primer registro anterior con REMANENTES válidos\n    for (const registro of registros) {\n      if (registro.FECHA < fechaNum && registro.REMANENTES && registro.REMANENTES !== 0) {\n        return registro.FECHA;\n      }\n    }\n\n    return \"sin cierre de ciclo\";\n\n  } catch (error) {\n    throw new Error(`Error al procesar datos históricos: ${error.message}`);\n  }\n}\n\nconst fechaValida = obtenerFechaAnteriorConRemanentes(input);\n\nreturn [\n  {\n    json: {\n      fecha: fechaValida.toString()\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -60
      ],
      "id": "bbd892c8-3e98-4f3b-9432-c785306a65b0",
      "name": "LogicaFechaHistorico"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        500,
        -60
      ],
      "id": "ab259fb4-e615-4a66-af68-28b07f251587",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\nconst input2 = $input.first().json;\n\n// Verificar si el objeto está vacío\nconst isEmpty = Object.keys(input).length === 0 && input.constructor === Object;\nif (isEmpty) {\n  return [\n    {\n      listHistorico: null\n    }\n  ];\n} else {\n  // Retorna el json original si no está vacío\n  return [\n    {\n      listHistorico: input\n    }\n  ];\n}\n\n//return {\"listHistorico\": $input.all()};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        40
      ],
      "id": "4fe6ae0b-9394-44b2-a26f-732318461fd4",
      "name": "Code"
    },
    {
      "parameters": {
        "inputSource": "jsonExample",
        "jsonExample": "\n  {\n      \"idAtm\": 8141,\n      \"fechaAtm\": 20250217\n  }\n"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -60,
        -80
      ],
      "id": "c717e7ac-c9e4-489c-9c61-14fb1f52a55c",
      "name": "When Executed by Another Workflow",
      "notesInFlow": true
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "NCkJEUXLgsZlgKLO",
          "mode": "list",
          "cachedResultName": "app_hdi_historicoDate"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "idAtm": "={{ $json.idAtm }}",
            "fechaAtm": "={{ $json.fechaAtm }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "idAtm",
              "displayName": "idAtm",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number",
              "removed": false
            },
            {
              "id": "fechaAtm",
              "displayName": "fechaAtm",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        500,
        -240
      ],
      "id": "6cf0334b-502c-4676-a260-e50b569e9964",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "content": "## Ejemplo json _historicoDate\n### Entrada\n```json\n{\n    \"idAtm\": 8141,\n    \"fechaAtm\": \"20250217\"\n}\n```\n\n### Salida:\n```json\n{\n  \"fecha\": 20250215\n}\n```",
        "height": 440,
        "width": 380,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -500,
        -320
      ],
      "id": "1e9ce3fe-7e3c-48a3-a101-985a724da8fa",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "aggregate"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        700,
        120
      ],
      "id": "46b628f4-1b43-4fab-9ea3-7a952b08d46d",
      "name": "MongoDB1",
      "credentials": {
        "mongoDb": {
          "id": "J6HuzpFN5ghJjIF7",
          "name": "MongoDB account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "18261612-458c-403b-9b93-b36be7259bc5",
              "name": "fecha",
              "value": 20250214,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        920,
        -60
      ],
      "id": "c604bcc1-f753-45f1-a09c-35f8859d3c5a",
      "name": "Edit Fields1",
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LogicaFechaHistorico": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "LogicaFechaHistorico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "67d39b34-ada0-40f9-9da1-d2bcbb42575a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ae116b9c25ca09b6fc49d8e730094c0929b168373f3afe3e106b7c23d9778cc3"
  },
  "id": "NCkJEUXLgsZlgKLO",
  "tags": []
}